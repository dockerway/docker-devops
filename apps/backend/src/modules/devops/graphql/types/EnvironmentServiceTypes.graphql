type VariableEnvService{
    name: String!
    value: String
}

type PortEnvService{
    hostPort: Int!
    containerPort: Int!
}


type VolumeEnvService{
    hostVolume: String!
    containerVolume: String!
}



type EnvironmentService{
    id: ID!
    environment: Environment!
    service: Service!
    stack: String!
    variables: [VariableEnvService]
    ports: [PortEnvService]
    volumes: [VolumeEnvService]
}

type EnvironmentServicePaginated{
    totalItems: Int!
    page: Int!
    items: [EnvironmentService!]
}

type Query {
    findEnvironmentService(id:ID!): EnvironmentService
    fetchEnvironmentService: [EnvironmentService]
    paginateEnvironmentService( pageNumber: Int, itemsPerPage: Int, search: String, filters: [FilterInput],orderBy: String, orderDesc: Boolean): EnvironmentServicePaginated
}


input VariableEnvServiceInput{
    name: String!
    value: String
}

input PortEnvServiceInput{
    hostPort: Int!
    containerPort: Int!
}


input VolumeEnvServiceInput{
    hostVolume: String!
    containerVolume: String!
}

input EnvironmentServiceInput{
    environment: ID!
    service: ID!
    stack: String!
    variables: [VariableEnvServiceInput]
    ports: [PortEnvServiceInput]
    volumes: [VolumeEnvServiceInput]
}

type EnvironmentServiceDelete{
    id: ID!
    success: Boolean!
}


type Mutation {
    createEnvironmentService(input: EnvironmentServiceInput): EnvironmentService
    updateEnvironmentService(id: ID!, input: EnvironmentServiceInput): EnvironmentService
    deleteEnvironmentService(id: ID!): EnvironmentServiceDelete!
}
