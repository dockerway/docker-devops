type DockerImage{
    name: String
    namespace: String
    domain: String
    fullname: String
    tag: String
}

type Port{
    protocol: String
    containerPort: Int
    hostPort: Int
}

type Volume{
    type: String
    containerVolume: String
    hostVolume: String
}

type Env{
    name: String
    value: String
}

type Label{
    name: String
    value: String
}

type DockerService {
    id: String
    name: String
    stack: String
    image: DockerImage
    createdAt: String
    updatedAt: String
    ports: [Port]
    volumes: [Volume]
    envs: [Env]
    labels: [Label]
}


type Query {
    findDockerServiceTag(id: ID!): String
    findDockerService(id: ID!): DockerService
}

input PortInput{
    protocol: String
    containerPort: Int
    hostPort: Int
}

input VolumeInput{
    type: String
    containerVolume: String
    hostVolume: String
}

input EnvInput{
    name: String
    value: String
}

input LabelInput{
    name: String
    value: String
}

input DockerServiceInput {
    serviceId: String!
    name: String!
    image: String!
    replicas: Int
    ports: [PortInput]
    volumes: [VolumeInput]
    envs: [EnvInput]
    labels: [LabelInput]
}

type Mutation {
    createDockerService(input: DockerServiceInput!): DockerService
}
