type DockerImage{
    name: String
    namespace: String
    domain: String
    fullname: String
    tag: String
}

type Port{
    protocol: String
    containerPort: Int
    hostPort: Int
}

type Volume{
    type: String
    containerVolume: String
    hostVolume: String
}

type Env{
    name: String
    value: String
}

type Label{
    name: String
    value: String
}

type Constraint{
    name: String
    operation: String
    value: String
}

type Limit{
    memoryReservation: Int
    memoryLimit: Int
    CPUReservation: Int
    CPULimit: Int
}

type DockerService {
    id: String
    name: String
    stack: String
    image: DockerImage
    createdAt: String
    updatedAt: String
    ports: [Port]
    volumes: [Volume]
    envs: [Env]
    labels: [Label]
    constraints: [Constraint]
    limits: Limit
}

type DockerTask {
    id: String
    nodeId: String
    serviceId: String
    containerId: String
    image: DockerImage
    createdAt: String
    updatedAt: String
    state: String,
    message: String
}

type DockerStats{
    cpu: String
    memoryLimit: String
    memoryUsage: String
}

type DockerTaskStats{
    task: DockerTask
    stats: DockerStats
}

type Query {
    findDockerServiceStats(id: ID!): [DockerTaskStats]
    findDockerServiceTag(id: ID!): String
    findDockerService(id: ID!): DockerService
}

input PortInput{
    protocol: String
    containerPort: Int
    hostPort: Int
}

input VolumeInput{
    type: String
    containerVolume: String
    hostVolume: String
}

input EnvInput{
    name: String
    value: String
}

input LabelInput{
    name: String
    value: String
}



type Mutation {
    createDockerService(id: ID!): DockerService
    updateDockerService(id: ID!, targetImage: String): DockerService
}
