type EnvService{
    name: String!
    defaultValue: String
}

type ConstraintService {
    name: String!
    operation: String
    defaultValue: String
}

type FileService{
    fileName: String
    fileContent: String
    containerPath: String
}

type LimitService {
    memoryReservation: Float
    memoryLimit: Float
    CPUReservation: Float
    CPULimit: Float
}

type PreferenceService{
    name: String!
    defaultValue: String
}

type Service{
    id: ID!
    name: String!
    description: String
    image: String
    repository: String
    platform: Platform!
    volumes: [String]
    files: [FileService]
    ports: [Int]
    envs: [EnvService]
    constraints: [ConstraintService]
    limits: LimitService
    preferences: [PreferenceService]
}

type ServicePaginated{
    totalItems: Int!
    page: Int!
    items: [Service!]
}

type Query {
    findService(id:ID!): Service
    findServiceByItsName(name:String!): Service
    findServiceByItsNameAndStack(name:String!, stack:String!): Service
    fetchService: [Service]
    paginateService( pageNumber: Int, itemsPerPage: Int, search: String, filters: [FilterInput],orderBy: String, orderDesc: Boolean): ServicePaginated
}

input EnvServiceInput{
    name: String!
    defaultValue: String
}

input ConstraintServiceInput{
    name: String!
    operation: String
    defaultValue: String
}

input FileServiceInput{
    fileName: String
    fileContent: String
    containerPath: String
}

input LimitServiceInput{
    memoryReservation: Float
    memoryLimit: Float
    CPUReservation: Float
    CPULimit: Float
}

input PreferenceServiceInput{
    name: String!
    defaultValue: String
}

input ServiceInput{
    name: String!
    description: String
    platform: ID!
    image: String
    repository: String
    volumes: [String]
    files: [FileServiceInput]
    ports: [Int]
    envs: [EnvServiceInput]
    constraints: [ConstraintServiceInput]
    limits: LimitServiceInput
    preferences: [PreferenceServiceInput]
}

type ServiceDelete{
    id: ID!
    success: Boolean!
}

type Mutation {
    createService(input: ServiceInput): Service
    updateService(id: ID!, input: ServiceInput): Service
    deleteService(id: ID!): ServiceDelete!
}
