type EnvService{
    name: String!
    defaultValue: String
}

type Service{
    id: ID!
    name: String!
    description: String
    platform: Platform!
    volumes: [String]
    ports: [Int]
    envs: [EnvService]
}

type ServicePaginated{
    totalItems: Int!
    page: Int!
    items: [Service!]
}

type Query {
    findService(id:ID!): Service
    fetchService: [Service]
    paginateService( pageNumber: Int, itemsPerPage: Int, search: String, filters: [FilterInput],orderBy: String, orderDesc: Boolean): ServicePaginated


}

input EnvServiceInput{
    name: String!
    defaultValue: String
}

input ServiceInput{
    name: String!
    description: String
    platform: ID!
    volumes: [String]
    ports: [String]
    envs: [EnvServiceInput]
}

type ServiceDelete{
    id: ID!
    success: Boolean!
}


type Mutation {
    createService(input: ServiceInput): Service
    updateService(id: ID!, input: ServiceInput): Service
    deleteService(id: ID!): ServiceDelete!
}
